{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBA6B/B,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAChCC,EAAU,CAAEJ,WAAUJ,SAE5B,OAAO,IAAIS,SAAQ,SAACC,EAASC,GACvBN,GACFK,EAAQF,GAERG,EAAOH,E,IAlCfZ,EAAKC,KAAKe,iBAAiB,UAE3B,SAAsBC,GAClBA,EAAMC,iBAON,IALA,IAAIC,EAAQC,OAAOpB,EAAKI,MAAMiB,OACxBhB,EAAOe,OAAOpB,EAAKK,KAAKgB,OACxBf,EAASc,OAAOpB,EAAKM,OAAOe,OAGzBC,EAAW,EAAGA,GAAYhB,EAAQgB,GAAY,EACrDf,EAAce,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MACjBqB,YAAW,WACT3B,EAAA4B,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANxB,EAAM,MAAK,CAAEyB,SAAS,G,GAC5EzB,E,IAEJ0B,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MAClBqB,YAAW,WACT3B,EAAA4B,OAAOK,QAAQ,sBAAqCH,OAAfpB,EAAS,QAAYoB,OAANxB,EAAM,MAAK,CAAEyB,SAAS,G,GACzEzB,E,IAEPe,GAASd,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n    event.preventDefault()\n\n    let delay = Number(refs.delay.value);\n    const step = Number(refs.step.value);\n    const amount = Number(refs.amount.value);\n    \n\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          setTimeout(() => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { useIcon: false });\n          }, delay);\n        })\n        .catch(({ position, delay }) => {\n          setTimeout(() => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { useIcon: false });\n          }, delay);\n        });\n      delay += step;\n    }\n  };\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    const promise = { position, delay };\n  \n    return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve(promise);\n      }\n        reject(promise);\n    });\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","promise","Promise","resolve","reject","addEventListener","event","preventDefault","delay1","Number","value","position1","then","param","setTimeout","Notify","success","concat","useIcon","catch","failure"],"version":3,"file":"03-promises.eaa81dc5.js.map"}